
import { Response } from "express";
import { BaseApplicationException } from "./base/BaseApplicationException";
import {
  AuthenticationException,
  AuthorizationException,
  PrismaClientKnownRequestError,
  ValidationException,
  QueryNotFound,
  InvalidQueryException,
} from "./errors";
import { logger, Color } from "./utils/colorLogger";

export class ApplicationExceptionController extends BaseApplicationException {

  private shouldDisableConsoleLogs = false;
  private defaultModule = "\nApplicationExceptionController\n"
  private defaultPrefixMessage = `To hide error logs, run with --disableErrorLog property\n`

  constructor(argv?: string[]) {
    super();
    if (argv?.includes("--disableErrorLog")) {
      this.shouldDisableConsoleLogs = true
    }
  }
  handle(response: Response, error: unknown) {

    if (!this.shouldDisableConsoleLogs) {
      const { message } = error as any

      logger([
        {
          message: this.defaultModule,
          color: Color.pink
        },
        {
          message: this.defaultPrefixMessage,
          color: Color.yellow
        },
        {
          color: Color.red,
          message
        },
      ])
    }

    if (error instanceof AuthenticationException) {
      return this.AuthenticationException({ response, error });
    }
    if (error instanceof ValidationException) {
      return this.ValidationException({ response, error });
    }
    if (error instanceof QueryNotFound) {
      return this.QueryNotFound({ response, error });
    }

    if (error instanceof AuthorizationException) {
      return this.AuthorizationException({ response, error });
    }

    if (error instanceof InvalidQueryException) {
      return this.InvalidQueryException({ response, error });
    }

    if (error instanceof PrismaClientKnownRequestError) {
      return this.PrismaClientKnownRequestError({ response, error });
    }

    if (error instanceof Error) {
      return response.status(500).json(error.message);
    }

    return response.status(503).json(error);
  }
}
export const exceptionController = new ApplicationExceptionController()