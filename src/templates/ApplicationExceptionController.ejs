
import { Response } from "express";
import { BaseApplicationException } from "./base/BaseApplicationException";
import {
  AuthenticationException,
  PrismaClientKnownRequestError,
  ValidationException,
  QueryNotFound,
  InvalidQueryException,
} from "./errors";

export class ApplicationExceptionController extends BaseApplicationException {

   constructor(argv?: string[]) {
    super();

  }
  handle(response: Response, error: unknown) {


    if (error instanceof AuthenticationException) {
      return this.AuthenticationException({ response, error });
    }
    if (error instanceof ValidationException) {
      return this.ValidationException({ response, error });
    }
    if (error instanceof QueryNotFound) {
      return this.QueryNotFound({ response, error });
    }

    if (error instanceof AuthorizationException) {
      return this.AuthorizationException({ response, error });
    }

    if (error instanceof InvalidQueryException) {
      return this.InvalidQueryException({ response, error });
    }

    if (error instanceof PrismaClientKnownRequestError) {
      return this.PrismaClientKnownRequestError({ response, error });
    }

    if (error instanceof Error) {
      return response.status(500).json(error.message);
    }

    return response.status(503).json(error);
  }
}
export const exceptionController = new ApplicationExceptionController()